#        _      __ _            
#  _   _| |_   / _| |_   ___  __
# | | | | __| | |_| | | | \ \/ /
# | |_| | |_  |  _| | |_| |>  < 
#  \__, |\__| |_| |_|\__,_/_/\_\
#  |___/                        
#
# Script that uses Miniflux' REST API to fetch
# all YouTube videos â€” entries from feeds to in
# category "YouTube", uses jq to get all links
# and fzf to select what to download with yt-dlp
#
# Tristan Lukens (2025) <https://tristanlukens.com>

#!/bin/bash

YT_FLUX_BROWSER_PATH="/Applications/Brave Browser.app"

echo "Getting recent entries. This might take a few seconds..."

node ./src/getRecents.js > /tmp/yt-flux-entries.json

choice=$(cat /tmp/yt-flux-entries.json | jq -r "values[]" | fzf)

if [[ -z $choice ]]; then
    echo "Nothing was selected; aborting..."
    exit 1
fi

id=$(echo $choice | grep -o "^\[\d*\]")
url=$(cat /tmp/yt-flux-entries.json | jq -r ". | with_entries(select(.value | startswith(\"$id\"))) | keys[]")

echo "Selected $(tput bold)$(echo $choice | sed 's/^\[.*\]\ //g')$(tput sgr0)" # Removes everything between brackets, plus the colon and space after them
echo "Excellent choice. Hopefully."
read -p "[O]pen, [d]ownload or [c]opy link? "

case $REPLY in
    "o" | "open")
        action="open"
    ;;
    "d" | "download")
        action="download"
    ;;
    "c" | "copy")
        action="copy"
    ;;
    *)
        action="open"
    ;;
esac

if [ $action == "open" ]; then
    echo "Opening in configured browser..."
    open -a "$YT_FLUX_BROWSER_PATH" "$url"
    exit 0
fi

if [ $action == "copy" ]; then
    echo $url | pbcopy && echo "Copied url to clipboard"
    exit 0
fi

echo "Using yt-dlp to download video. This could take a while..."
yt-dlp -q --no-warnings -o "$HOME/Movies/%(title)s.%(ext)s" -f "mp4" $url && echo "Downloaded video as mp4 to configured directory"